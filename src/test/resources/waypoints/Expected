package com.waypoints.test

import godot.*
import godot.core.NodePath
import kotlin.reflect.KProperty

object GDTree {
    val Main = MainScene("/root")
    val Waypoint = WaypointScene("/root")
}

class MainScene(path: String) : NodeRef<Node3D>("$path/Main", "Node3D") {
    val BlueCube = object : NodeRef<MeshInstance3D>("$path/Main/BlueCube", "MeshInstance3D") {
        val WaypointAnchor = object : NodeRef<Marker3D>("$path/Main/BlueCube/WaypointAnchor", "Marker3D") {
            val Waypoint = WaypointScene("$path/Main/BlueCube/WaypointAnchor/Waypoint")
        }
    }
    val GreenCube = object : NodeRef<MeshInstance3D>("$path/Main/GreenCube", "MeshInstance3D") {
        val WaypointAnchor = object : NodeRef<Marker3D>("$path/Main/GreenCube/WaypointAnchor", "Marker3D") {
            val Waypoint = WaypointScene("$path/Main/GreenCube/WaypointAnchor/Waypoint")
        }
    }
    val YellowCube = object : NodeRef<MeshInstance3D>("$path/Main/YellowCube", "MeshInstance3D") {
        val WaypointAnchor = object : NodeRef<Marker3D>("$path/Main/YellowCube/WaypointAnchor", "Marker3D") {
            val Waypoint = WaypointScene("$path/Main/YellowCube/WaypointAnchor/Waypoint")
        }
    }
    val RedCube = object : NodeRef<MeshInstance3D>("$path/Main/RedCube", "MeshInstance3D") {
        val WaypointAnchor = object : NodeRef<Marker3D>("$path/Main/RedCube/WaypointAnchor", "Marker3D") {
            val Waypoint = WaypointScene("$path/Main/RedCube/WaypointAnchor/Waypoint")
        }
    }
    val Camera3D = NodeRef<Camera3D>("$path/Main/Camera3D", "Camera3D")
    val Label = NodeRef<Label>("$path/Main/Label", "Label")
    val Ground = NodeRef<MeshInstance3D>("$path/Main/Ground", "MeshInstance3D")
    val WhiteCube = NodeRef<MeshInstance3D>("$path/Main/WhiteCube", "MeshInstance3D")
    val Environment = object : NodeRef<WorldEnvironment>("$path/Main/Environment", "WorldEnvironment") {
        val Sun = NodeRef<DirectionalLight3D>("$path/Main/Environment/Sun", "DirectionalLight3D")
    }
}

class WaypointScene(path: String) : NodeRef<Control>("$path/Waypoint", "Control") {
    val Label = NodeRef<Label>("$path/Waypoint/Label", "Label")
    val Marker = NodeRef<TextureRect>("$path/Waypoint/Marker", "TextureRect")
}

open class NodeRef<T : Node>(
        private val path: String,
        private val type: String,
) {
    operator fun getValue(thisRef: Node, property: KProperty<*>): T {
        val node = thisRef.getNode(NodePath(path)) ?: throw NodeNotFoundException(path)
        @Suppress("UNCHECKED_CAST")
        (node as? T) ?: throw NodeInvalidTypeException(type)
        return node
    }
}

class NodeNotFoundException(expectedPath: String) : Exception("Node not found under given path $expectedPath")

class NodeInvalidTypeException(expectedType: String?) : Exception("Node is not an instance of $expectedType")
