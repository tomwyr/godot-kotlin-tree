package com.physics.test

import godot.*
import godot.core.NodePath
import kotlin.reflect.KProperty

object GDTree {
    val Main = MainScene("/root")
}

class MainScene(path: String) : NodeRef<Control>("$path/Main", "Control") {
    val TestsMenu = NodeRef<MenuButton>("$path/Main/TestsMenu", "MenuButton")
    val LabelControls = NodeRef<Label>("$path/Main/LabelControls", "Label")
    val LabelFPS = NodeRef<Label>("$path/Main/LabelFPS", "Label")
    val LabelEngine = NodeRef<Label>("$path/Main/LabelEngine", "Label")
    val LabelVersion = NodeRef<Label>("$path/Main/LabelVersion", "Label")
    val LabelTest = NodeRef<Label>("$path/Main/LabelTest", "Label")
    val LabelPause = NodeRef<Label>("$path/Main/LabelPause", "Label")
    val PanelLog = object : NodeRef<Panel>("$path/Main/PanelLog", "Panel") {
        val ButtonClear = NodeRef<Button>("$path/Main/PanelLog/ButtonClear", "Button")
        val CheckBoxScroll = NodeRef<CheckButton>("$path/Main/PanelLog/CheckBoxScroll", "CheckButton")
        val ScrollLog = object : NodeRef<ScrollContainer>("$path/Main/PanelLog/ScrollLog", "ScrollContainer") {
            val VBoxLog = object : NodeRef<VBoxContainer>("$path/Main/PanelLog/ScrollLog/VBoxLog", "VBoxContainer") {
                val LabelLog = NodeRef<Label>("$path/Main/PanelLog/ScrollLog/VBoxLog/LabelLog", "Label")
            }
        }
    }
}

open class NodeRef<T : Node>(
        private val path: String,
        private val type: String,
) {
    operator fun getValue(thisRef: Node, property: KProperty<*>): T {
        val node = thisRef.getNode(NodePath(path)) ?: throw NodeNotFoundException(path)
        @Suppress("UNCHECKED_CAST")
        (node as? T) ?: throw NodeInvalidTypeException(type)
        return node
    }
}

class NodeNotFoundException(expectedPath: String) : Exception("Node not found under given path $expectedPath")

class NodeInvalidTypeException(expectedType: String?) : Exception("Node is not an instance of $expectedType")
