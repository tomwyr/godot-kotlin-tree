package com.scenes.changer

import godot.*
import godot.core.NodePath
import kotlin.reflect.KProperty

object GDTree {
    val SceneA = SceneAScene("/root")
    val SceneB = SceneBScene("/root")
}

class SceneAScene(private val path: String) : NodeRef<Panel>("$path/SceneA", "Panel") {
    val Label = NodeRef<Label>("$path/SceneA/Label", "Label")
    val GoToScene = NodeRef<Button>("$path/SceneA/GoToScene", "Button")
}

class SceneBScene(private val path: String) : NodeRef<Panel>("$path/SceneB", "Panel") {
    val Label = NodeRef<Label>("$path/SceneB/Label", "Label")
    val GoToScene = NodeRef<Button>("$path/SceneB/GoToScene", "Button")
}

open class NodeRef<T : Node>(
    private val path: String,
    private val type: String,
) {
    operator fun getValue(thisRef: Node, property: KProperty<*>): T {
        val node = thisRef.getNode(NodePath(path)) ?: throw NodeNotFoundException(path)
        @Suppress("UNCHECKED_CAST")
        (node as? T) ?: throw NodeInvalidTypeException(type)
        return node
    }
}

class NodeNotFoundException(expectedPath: String) : Exception("Node not found under given path $expectedPath")

class NodeInvalidTypeException(expectedType: String?) : Exception("Node is not an instance of $expectedType")
