package com.example.game

import godot.*
import godot.core.NodePath
import kotlin.reflect.KProperty

object GDTree {
    val HUD = HUDScene("/root")
    val Main = MainScene("/root")
    val Mob = MobScene("/root")
    val Player = PlayerScene("/root")
}

class HUDScene(path: String) : NodeRef<CanvasLayer>("$path/HUD", "CanvasLayer") {
    val ScoreLabel = NodeRef<Label>("$path/HUD/ScoreLabel", "Label")
    val MessageLabel = NodeRef<Label>("$path/HUD/MessageLabel", "Label")
    val StartButton = NodeRef<Button>("$path/HUD/StartButton", "Button")
    val MessageTimer = NodeRef<Timer>("$path/HUD/MessageTimer", "Timer")
}

class MainScene(path: String) : NodeRef<Node>("$path/Main", "Node") {
    val ColorRect = NodeRef<ColorRect>("$path/Main/ColorRect", "ColorRect")
    val Player = PlayerScene("$path/Main/Player")
    val MobTimer = NodeRef<Timer>("$path/Main/MobTimer", "Timer")
    val ScoreTimer = NodeRef<Timer>("$path/Main/ScoreTimer", "Timer")
    val StartTimer = NodeRef<Timer>("$path/Main/StartTimer", "Timer")
    val StartPosition = NodeRef<Marker2D>("$path/Main/StartPosition", "Marker2D")
    val MobPath = object : NodeRef<Path2D>("$path/Main/MobPath", "Path2D") {
        val MobSpawnLocation = NodeRef<PathFollow2D>("$path/Main/MobPath/MobSpawnLocation", "PathFollow2D")
    }
    val HUD = HUDScene("$path/Main/HUD")
    val Music = NodeRef<AudioStreamPlayer>("$path/Main/Music", "AudioStreamPlayer")
    val DeathSound = NodeRef<AudioStreamPlayer>("$path/Main/DeathSound", "AudioStreamPlayer")
    val ColorAnimator = NodeRef<Node2D>("$path/Main/ColorAnimator", "Node2D")
}

class MobScene(path: String) : NodeRef<RigidBody2D>("$path/Mob", "RigidBody2D") {
    val AnimatedSprite2D = NodeRef<AnimatedSprite2D>("$path/Mob/AnimatedSprite2D", "AnimatedSprite2D")
    val CollisionShape2D = NodeRef<CollisionShape2D>("$path/Mob/CollisionShape2D", "CollisionShape2D")
    val VisibleOnScreenNotifier2D = NodeRef<VisibleOnScreenNotifier2D>("$path/Mob/VisibleOnScreenNotifier2D", "VisibleOnScreenNotifier2D")
}

class PlayerScene(path: String) : NodeRef<Area2D>("$path/Player", "Area2D") {
    val AnimatedSprite2D = NodeRef<AnimatedSprite2D>("$path/Player/AnimatedSprite2D", "AnimatedSprite2D")
    val CollisionShape2D = NodeRef<CollisionShape2D>("$path/Player/CollisionShape2D", "CollisionShape2D")
    val Trail = NodeRef<GPUParticles2D>("$path/Player/Trail", "GPUParticles2D")
}

open class NodeRef<T : Node>(
        private val path: String,
        private val type: String,
) {
    operator fun getValue(thisRef: Node, property: KProperty<*>): T {
        val node = thisRef.getNode(NodePath(path)) ?: throw NodeNotFoundException(path)
        @Suppress("UNCHECKED_CAST")
        (node as? T) ?: throw NodeInvalidTypeException(type)
        return node
    }
}

class NodeNotFoundException(expectedPath: String) : Exception("Node not found under given path $expectedPath")

class NodeInvalidTypeException(expectedType: String?) : Exception("Node is not an instance of $expectedType")
