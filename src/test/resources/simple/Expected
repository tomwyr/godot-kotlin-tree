package com.simple.game

import godot.*
import godot.core.NodePath
import kotlin.reflect.KProperty

object GDTree {
    val Main = MainScene("/root")
}

class MainScene(private val path: String) : NodeRef<GridContainer>("$path/Root", "GridContainer") {
    val KotlinGDJ = NodeRef<Label>("$path/Root/Kotlin GDJ", "Label")
    val JavaGDJ = NodeRef<Label>("$path/Root/Java GDJ", "Label")
    val KotlinSource = NodeRef<Label>("$path/Root/Kotlin source", "Label")
    val JavaSource = NodeRef<Label>("$path/Root/Java source", "Label")
}

open class NodeRef<T : Node>(
    private val path: String,
    private val type: String,
) {
    operator fun getValue(thisRef: Node, property: KProperty<*>): T {
        val node = thisRef.getNode(NodePath(path)) ?: throw NodeNotFoundException(path)
        @Suppress("UNCHECKED_CAST")
        (node as? T) ?: throw NodeInvalidTypeException(type)
        return node
    }
}

class NodeNotFoundException(expectedPath: String) : Exception("Node not found under given path $expectedPath")

class NodeInvalidTypeException(expectedType: String?) : Exception("Node is not an instance of $expectedType")
